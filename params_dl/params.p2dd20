###########################################################################
#     Parameter file for Cado-NFS ; DLP version in GF(p^2)
###########################################################################

###########################################################################
# General parameters
###########################################################################

name = p2dd20

# The followig two parameters tell the main script to do DL in GF(p^2)
dlp = true
gfpext = 2

# N is the prime p (inherited from factorization, sorry...)
# ell is the factor of N+1 modulo which the computations are done
# N = 100000000000000000039
# ell = 164354743277891

## Flags to (des-)activate the appropriate funcionalities
#
# Galois is when *both* polynomials have an automorphism of order 2. This
# is the case for polynomials selected by default. But if you use
# imported polynomials, you might need to set to false. 
# The available automorphisms are "1/y" (for reciprocal polynomials) and
# "_y" (for polynomials with only even powers).
tasks.galois = 1/y

# If you don't want the "full column of 1", uncomment the following line.
# In particular when both polynomials are not monic, this could help.
# tasks.lcideals = false

tasks.I = 10

#######################
# Polynomial selection 
#######################

# no parameter for the moment

# If we want to import your own polynomial file, uncomment the following:
# tasks.polyselect.import = /path/to/mypoly.poly

#########
# Sieve
#########

rlim = 20000
alim = 20000
lpbr = 17
lpba = 17
tasks.sieve.mfbr = 34
tasks.sieve.mfba = 34
tasks.sieve.qmin = 20000
tasks.sieve.qrange = 1000
tasks.sieve.rels_wanted = 1
# The polynomials selected by default put the "small polynomial" on side 0,
# so we need to put the special-q on that side 
tasks.sieve.sqside = 0

tasks.allow_zero_on_rhs=1


#############
# Final step
#############

# With the "partial" option, does not compute the log of small elements
# that were eliminated during the filter
tasks.reconstructlog.partial = false

# We do not have any easy way to check the result since there is no
# rational side
checkdlp = false
