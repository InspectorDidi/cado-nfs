WARNING: with gcc version below than 5.3 (at least), the __builtin_*_overflow
are not supported. You need to enable SLLL_SAFE instead (see the section about
nfs-hd/CMakeLists.txt). A better workaround will be available soon.

Compile:
  * remove "#" in "#add_subdirectory (nfs-hd)";
  * (optionaly) copy "local.sh.example" in "local.sh" in the same directory;
  * (optionaly) edit "local.sh" if you want that binaries are stored in a
     specific directory (see line "build_tree=…");
  * (optionaly) edit "local.sh" if you want specific compiling options (see line
    "CFLAGS=…" and "CXXFLAGS=…", current state of the code support at least
    combination of "-g", "-O[0-3]", "-DNDEBUG");
  * execute: "make makefb-hd special-q_sieve";
  * if you have not edit "local.sh", the binaries needed to launch our examples
    can be found in "build/<hostname>/nfs-hd", otherwise they can be found in
    the directory "nfs-hd" in the path we edit in "build_tree".

Source code:
  * the great majority of the implementation of the sieve in higher dimensions
    can be found in the directory "nfs-hd".

Reproduce the computations of http://hal.inria.fr/hal-01273045 :
  * the polynomials files are stored in the directory "parameters/nfs-hd",
    one for the p6bd40 (240 bits), an other of the p6bd50 (300 bits) and a last
    for p6bd65 (389 bits);
  * the file "parameters/nfs-hd/command_p6bd(40|50|65).txt" contains the two
    needed commands, the first one to build the sieve base, i.e. all the
    elements we will sieve, and the second to perform the sieve itself;
  * check the relations:
  ** after the special-q_sieve, the output is stored in the file you give in
    argument to -out;
  ** use "grep -v "#" [path/to/out]> relations.raw" to extract the relations;
  ** use "sort relations.raw | uniq > relations.uniq" to remove duplicate;
  ** in the directory "nfs-hd/check_relations", compile "check_relation" with
     "make" (it requires NTL, maybe modify some variables such as build_tree);
  ** put "p6bd(40|50|65).poly", "check_relations" and "relations.uniq" in the
    same directory;
  ** in the file "parameters/nfs-hd/command_p6bd(40|50|65).txt", the last
    line gives the command you need to launch this check.

----------

All these steps, including compilation, are summarized in
"nfs-hd/automatic_p6bd40.sh".

---------

qfile usages
There exist two ways to use a qfile.
1/ Use qfile
qfile must be compose by "qside:q". For the p6bd50, qfile can be like
"
1:1483019
1:1667417
"
./special-q_sieve -H 7,7,7 -fbb 1482911,1482911 -thresh 80,80 -poly p6bd50.poly
-lpb 25,25 -fb factor_base -base 2,2 -gal 6 -qfile qfile

2/ Use qfilespq
qfilespq must be compose by "qside:q:h". For the p6bd50, qfilespq can be like
"
1:1483019:1328328,1
1:1667417:317828,1
"
./special-q_sieve -H 7,7,7 -fbb 1482911,1482911 -thresh 80,80 -poly p6bd50.poly
-lpb 25,25 -fb factor_base -base 2,2 -gal 6 -qfilespq qfilespq

---------
nfs-hd/CMakeLists.txt
Some features can be enabled by setting some things in the
nfs-hd/CMakeLists.txt. In order to have these features enabled, you need to
have lines as 
  set_property(TARGET special-q_sieve PROPERTY COMPILE_DEFINITIONS
  TIMES_SIEVES NOT_PRINT_RELATION SIEVE SKEWNESS=2 SPACE_SIEVE_STAT)

An incomplete list is given below:
  * TIME_SIEVES: print the spending time by sieves for a special-q.
  * NUMBER_HIT: give the real and expected number of hit per ideal r.
  * LINE_SIEVE_BOUND=[x]: do line sieve even if r >= [x] * 2 * H[0], [x] must
    be >= 1.0 and is a double.
  * PLANE_SIEVE_BOUND=[x]: do line sieve even if r >= [x] * 4 * H[0] * H[1],
    [x] must be >= 1.0 and is a double.
  * TRACE_POS=[x]: follow what happens in a specific cell of the array in which
    we store the norm.
  * PLANE_SIEVE_INSTEAD_OF_SPACE_SIEVE: do plane sieve instead of space sieve
    when r >= 4 * H[0] * H[1].
  * ENUM_LATTICE_INSTEAD_OF_SPACE_SIEVE: perform enumeration algorithm (like
    KFP) instead of space sieve wher r >= 4 * H[0] * H[1].
  * ASSERT_SIEVE: verify what happens when a hit is done. If MODE_SIEVE_LINE is
    activated, disable ASSERT_SIEVE during line sieve (same for
    MODE_SIEVE_PLANE and MODE_SIEVE_SPACE).
  * SPACE_SIEVE_STAT: do some stat during space sieve.
  * SLLL_SAFE: use mpz version of LLL to perform skew LLL.

-----
Galois action
If qfile (not qfilespq) or q_range are used, special-q_sieve try to select the
special-q with the best estimated number of relations (fuction
"compute_all_spq").
To add support of galois action, you need to add some code to
use the galois action in the function "good_polynomial". An example of this
code can be found in the function "printf_relation_galois_6_0".
If you want to add a new action, please follow the nomenclature
"autom<order_of_the_galois_action>.<type>".
Implemented galois action:
  * autom6.1: x-> -(2 * x + 1) / (x - 1) for polynomial of degree 1 and 2
