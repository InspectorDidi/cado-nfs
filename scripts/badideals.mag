ZZ:=Integers();
QQ:=Rationals();

ZP<x>:=PolynomialAlgebra(ZZ);
ZPH:=PolynomialRing(ZZ,2);

// When DEBUG is assigned, it is possible to load this file and debug
// the explicitly given polynomial that follows:
if assigned DEBUG then
    f := 840*x^5-16210*x^4+2610983*x^3-2560484269*x^2-34656366009*x+253976285986533;
    g := 240*x^4+4327846*x^3-11463289949*x^2-48524924823332*x+99623823815957215;
    ell := 42;
    badfile := "";
    badinfofile := "";
    polyfile := "";
    mainp := "";
    polys := [g, f];
else
    lines := Split(Read(polyfile));
    f := ZP!0;
    for l in lines do
        if l[1] ne "c" then continue; end if;
        e := StringToInteger(l[2]);
        c := StringToInteger(Split(l, " ")[2]);
        f +:= c*x^e;
    end for;
    g := ZP!0;
    for l in lines do
        if l[1] ne "Y" then continue; end if;
        e := StringToInteger(l[2]);
        c := StringToInteger(Split(l, " ")[2]);
        g +:= c*x^e;
    end for;
    if f ne 0 then
        polys:=[g, f];
    else
      polys:=[];
      // try the new format if any
      for l in lines do
        if #l gt 4 and l[1..4] eq "poly" then
	    // assuming l = "poly%d: c0,c1,..."
	    tmp:=Split(l, ":");
	    ind:=Split(tmp[1], "poly");
	    ind:=StringToInteger(ind[2]);
	    pol:=ZP![StringToInteger(x) : x in Split(tmp[2], ",")];
	    polys[ind +1]:=pol;
	end if;
      end for;
    end if;
end if;

/*
// p180
f:=17153280*x^5+55645402596756*x^4+289642429100355466945*x^3-5839034183672356481708253628*x^2-3489195459822344127350367941464660*x-24774668987371397084528618164507418928;

// p59
f:=120*x^4+467713*x^3-2284154258*x^2+57498079368420*x-21758746190334120;

// p155
f:=1919367450*x^5 - 372912695938455*x^4 + 28914191881484128958*x^3 + 2214553172801635020339838*x^2 + 16533777180271226594332227762*x - 1218572890737513374062358400776760;

f := 240*x^4+4327846*x^3-11463289949*x^2-48524924823332*x+99623823815957215;
*/


//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//   Functions for dealing with bad ideals, without factoring
//   the discriminant.
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////


/*
 * Done:
 *
 *  - locally maximal order.
 *  - valuation at a prime ideal.
 *  - factorization of p*OK.
 */

/* This function takes the basis of a Z-module, and returns its discriminant.
 * The Z-module does not even need to be an order, although it's the most
 * useful situation. This discriminant with ``the'' discriminant notion
 * defined sometimes differently is other contexts. Note that the discriminant
 * of the (monic) polynomial defining the number field, which magma
 * incorrectly employs as a quickly-computed value for disc(K), is, with
 * respect to the present definition, the discriminant of the equation order
 * with respect to this equation */
function discriminant_from_orderbasis(G)
    n:=Degree(Universe(G));
    Z:=Integers();
    return Z!Determinant(Matrix(n,n,[Trace(gi*gj):gi,gj in G]));
end function;



/* Takes a list of number field elements, and returns an HNF form of the
 * Z-module they generate. The HNF is over the polynomial basis of the number
 * field */
function nf_elements_hnf(G)
    K:=Universe(G);
    Z:=Integers();
    Q:=Rationals();
    n:=Degree(K);
    M:=Matrix([Eltseq(g):g in G]);
    d:=Denominator(M);
    /* The antidiagonal matrix D_ is here just to make the basis appear in a
     * nicer order to the human eye */
    D_:=Matrix(Integers(),n,n,[i+j eq n+1 select 1 else 0:i,j in [1..n]]);
    X:=HermiteForm(ChangeRing(d*M,Z)*D_)*D_;
    M1:=D_*Matrix(Q,Submatrix(X,1,1,n,n))/d;
    G1:=[K!Eltseq(r):r in Rows(M1)];
    return G1, M1;
end function;


/* Ideals are conveniently represented as Z-modules in hnf representation */

/* XXX This seems unused.
 * This multiplies two ideals in hnf representation. Here we also declare as
 * an argument basis elements of the order I and J are ideals over, however
 * it's uneeded for the computation.   */
function ideal_multiply(G, I, J)
    return nf_elements_hnf([i*j: i in I, j in J]);
end function;

/* XXX This seems unused.
 * Given I, J ideals over the order defined by elements in G, compute an hnf
 * basis of the ideal IJ+p
 *
 * I don't even know why and how I could need this.
 */
function ideal_multiply_mod(G, I, J, p)
    return nf_elements_hnf([i*j: i in I, j in J] cat [p*g:g in G]);
end function;

/* This may be used to perform an equality check */
function is_basis_of_same_z_module(G1, G2)
    // returns t,M. If t, then M is such that Vector(G1)*Transpose(M) eq
    // Vector(G2)
    K:=NumberField(Universe(G1));
    M1:=Matrix([Eltseq(K!x):x in G1]);
    M2:=Matrix([Eltseq(K!x):x in G2]);
    M:=M2*M1^-1;
    Z:=Integers();
    if Denominator(M) eq 1 and IsUnit(Z!Determinant(M)) then
        return true, Matrix(Z, M);
    else
        return false, _;
    end if;
end function;



/* Given an order generated by number field elements G=[g1,...,g_n], and a
 * submodule Ic of G, whose generating elements are given in the list Ic as
 * vector of coordinates over the basis G (that is, Ic[i]=[xi1,...,xin]
 * represents the element xi1*g1+...+xin*gn), this function returns the
 * generating elements of Ic as elements of the number field, i.e. returns the
 * list [x11*g1+...+x1n*gn, ..., xn1*g1+...+xnn*gn].
 */
function order_elements_from_basis_coords(G, Ic)
    K:=Universe(G);
    return [(Vector(K,w),Vector(G)) : w in Ic];
end function;

/* This does almost exactly the converse, except that we return a matrix */
function order_elements_to_basis_coords(G, I)
    K:=Universe(G);
    MG:=Matrix([Eltseq(K!x):x in G]);
    MI:=Matrix([Eltseq(K!x):x in I]);
    return MI*MG^-1;
end function;


function prime_ideal_inertia_degree(G, I)
    coords:=order_elements_to_basis_coords(G,I);
    p:=I[1];
    assert IsCoercible(Integers(), p);
    assert IsPrime(Integers()!p);
    return Ilog(Integers()!p,Integers()!Determinant(coords));
end function;



/* Given the Z-module generated by I, add the full rank module pO, where
 * p is an integer and O the Z-module generated by the elements in G.
 */
function order_z_module_mod(G, I, p)
    return nf_elements_hnf(I cat [p*g:g in G]);
end function;


/* This computes the p-radical of the order O whose generators are the number
 * field elements in the list G. The p-radical is returned as an hnf basis of
 * the corresponding Z-module.
 *
 * The p-radical is the set of elements of OK such that x^(p^k)\in pO for some
 * k (which is shown below to be at most n=deg(K)).
 */
function p_radical_of_order(G, p)
    // Takes a list of generators [g1,...,gk] of an order. All have to be
    // algebraic integers. This
    K:=Universe(G);
    n:=Degree(K);
    // Write elements according to the basis of the number field. This may
    // incur denominators, which is not to be regarded as a problem.
    Z:=Integers();
    Q:=Rationals();

    // note that M may have rational coefficients.
    M:=Matrix(Q,[Eltseq(g):g in G]);

    // O is an order, thus a Z-module. O/pO is a Z/pZ vector space.
    // Raising to the p-th power there is a linear application, say F.
    // Elements x in Ip are such that F^k(x) is in pO, so equal to 0. So we're
    // interested in the characteristic subspace of O/pO where F has
    // eigenvalue 0. It's actually at most the kernel of F^n.  Ip is then
    // generated by lifts of generating elements of this kernel (that is,
    // given arbitrary lifts of kernel elements, adding pO gives a Z-basis of
    // the ideal Ip).

    // So take the p-th power of all generating elements in G, and rewrite
    // these as combinations of elements of G.
    F:=Matrix(GF(p),Matrix([Eltseq(g^p):g in G])*M^-1);
    ker:=Basis(Nullspace(F^n));
    ker_lifts:=[Vector(Z,v) : v in ker];

    I:=order_elements_from_basis_coords(G, ker_lifts);
    Gy, My := order_z_module_mod(G, I, p);
    return Gy, My;
end function;





// FIXME.
//
// This function is work in progress. Its purpose is to replace several
// similar occurences of the same calculation on matrices of size n*n^2. For
// the moment this generalized interface is defined for all intended uses. The
// code is used only by expand_order_at_p_using_radical, and not for
// valuation_helper_for_ideal, for instance.

// take two full rank submodules of the O-ideal generated by G satisfying I
// \subset J \subset I/p (thus J divides I, and I divides pJ).
//
// We want the kernel of O -> End(I/J).
//
// Application for the expansion of the radical: want the kernel of
//    O -> End(Ip/pIp)
// Make real use of the fact that we're quotienting by p times something: for
// beta in this kernel, we have beta * Ip in p Ip, thus (beta/p)*Ip in Ip. Our
// real target is in fact the set of beta/p 's
//
// Since
//
// Compute
// elements x of O such that xJ \in I (that is, elemnts of I/J).
//
// Applications. Given I, compute elements of O which are in 
//
// Compute the set X of x in O/p such that xJ\in I
//
// This function may be used as a building block for round-2, as well as the
// division of ideals, or the computation of valuations.
// also return the index of O in the returned Z-module.
function order_z_module_divide_restricted(G, I, J, p)
    K:=Universe(G);
    n:=Degree(K);
    Z:=Integers();
    Q:=Rationals();
    M:=Matrix(Q,[Eltseq(K!j):j in J]);

    C:=Matrix(GF(p),n,n^2,[]);
    // compute the inverse of the matrix defining the module J.
    N:=M^-1;
    for i in [1..n] do
        for j in [1..n] do
            // compute a number field element
            v:=G[i] * I[j];
            // turn this back into the coordinates for Ip.
            w:=Vector(Eltseq(v)) * N;
            for k in [1..n] do
                C[i,1+(j-1)*n+(k-1)]:=w[k];
            end for;
        end for;
    end for;

    nker:=Basis(Nullspace(C));
    nker_lifts:=[Vector(Z,v) : v in nker];

    I:=order_elements_from_basis_coords(G, nker_lifts);
    Gz := order_z_module_mod(G, I, p);
    return [g/p:g in Gz], p^#nker;
end function;

/* Takes a list of generators [g1,...,gk] of an order. All have to be
 * algebraic integers. This computes a larger order O', with conductor at
 * least 1/p smaller (if it exists, of course).
 *
 * returns the conductor (locally at p) and the new order in HNF form (with a
 * denominator).
 *
 * This function may be used as a workhorse for computing a locally maximal
 * order.
 */
function expand_order_at_p_using_radical(G, p)
    K:=Universe(G);
    n:=Degree(K);
    // Write elements according to the basis of the number field. This may
    // incur denominators, which is not to be regarded as a problem.
    Z:=Integers();
    Q:=Rationals();
    M:=Matrix(Q,[Eltseq(g):g in G]);
    d:=Denominator(M);
    M:=Matrix(Z, d*M);

    disc_O:=discriminant_from_orderbasis(G);

    if Valuation(disc_O, p) le 1 then return 1, G; end if;

    Gy, My := p_radical_of_order(G, p);

    // Cohen (p. 304) claims that one should rather update the basis for Ip
    // and deduce a basis of Ip/pIp by basis completion. Ok, but I don't see
    // at the moment how I compute the reductions mod pIp of the lifts without
    // computing the HNF first.
    // Bx:=ExtendBasis(ker, VectorSpace(GF(p),n));
    // Bx:=[(Vector(K,ChangeRing(Etlseq(w),Z)),Vector(G)) : w in Bx];
    
    // Now this Gy is a (generator set of an) O-ideal, namely its p-radical.
    // We're now going to compute the set O' of x\in K such that xIp is in Ip.
    // Note that O' is in O/p, so we may look for the set of elements of O
    // such that xIp is in pIp -- then O' is the set of the x/p. (as to why
    // O'\subset O/p, x\in O' => px \in Ip (since p\in Ip), whence px\in O
    // since Ip\subset O).
    
    // The strategy is thus to compute the coordinates of g*u over the basis
    // of Ip. u ranging over the basis elements of O, and g ranging over the
    // basis elements of Ip.
    Gt, f:=order_z_module_divide_restricted(G, Gy, Gy, p);

    return f, Gt;
end function;

/* This is a special case. There is no need to implement this code, as the
 * more general procedure above is sufficient for our purposes.
 *
 * Expand (at p) a monogenous order Z[\alpha], where f is the minimal
 * polynomial of alpha.
 * returns the conductor (locally at p) and the new order in HNF form (with a
 * denominator).
 */
function expand_order_at_p_from_monogenous(alpha, p)
    Z:=Integers();
    Q:=Rationals();
    K:=NumberField(Parent(alpha));
    fmon:=MinimalPolynomial(alpha);
    assert IsMonic(fmon);
    // compute the discriminant of Z[alpha]
    n:=Degree(K);

    // This gives a set of generators (sometimes it's arranged so that it's in
    // hnf, but not here at the start, for instance.
    G0:=[alpha^i:i in [0..n-1]];
    M0:=Matrix([Eltseq(g):g in G0]);
    d0:=1;

    disc_O:=discriminant_from_orderbasis(G0);

    if Valuation(disc_O, p) eq 0 then
        d:=Denominator(M0);
        M:=ChangeRing(d*M0,Z);
        X,T:=HermiteForm(M0);
        // M = T * X
        return 1, X, d * d0;
    end if;

    gp:=&*[x[1]:x in Factorization(fmon,GF(p))];
    hp:=fmon div gp;
    ZP:=PolynomialRing(Z);
    g:=ZP!gp;
    h:=ZP!hp;
    j:=(g*h - fmon) div p;
    kp:=Gcd([PolynomialRing(GF(p))|g,h,j]);
    up:=fmon div kp;
    u:=ZP!up;

    // This element is a new algebraic integer !
    beta:=Evaluate(u,alpha)/p;
    bM:=Matrix([Eltseq(K!(beta*g)):g in G0]);
    M:=VerticalJoin(M0, bM);
    d:=Denominator(M) * d0;
    M:=ChangeRing(d*M,Z);
    X,T:=HermiteForm(M);

    M1:=Submatrix(X,1,1,n,n)/d;
    G1:=[K!Eltseq(r):r in Rows(M1)];

    // ok good. 
    return p^Degree(kp), G1;
end function;

/* This sort of generalizes EquationOrder for a number field which is not
 * generated by a monic polynomial. We consider (f_d*alpha), which has a
 * monic minimal polynomial, and thus is an algebraic integer. Then we take
 * the order generated by its powers. This order is obviously unacceptably
 * small, but at least it's a starting point.
 */
function naive_equation_order(K)
    alpha:=K.1 * LeadingCoefficient(DefiningPolynomial(K));
    n:=Degree(K);
    G:=[K|alpha^i:i in [0..n-1]];
    return G;
end function;


/* This computes the p-maximal order of the number field K, together with the
 * conductor of the naive equation order, locally at p */
function p_maximal_order(K, p)
    alpha:=K.1 * LeadingCoefficient(DefiningPolynomial(K));
    n:=Degree(K);
    G:=[K|alpha^i:i in [0..n-1]];
    f:=1;
    repeat
        xf,G:=expand_order_at_p_using_radical(G, p);
        f*:=xf;
    until xf eq 1;
    return f, G;
end function;

/* This precomputes an element which may be used to compute valuations at a
 * given prime ideal */
function valuation_helper_for_ideal(G, I, p)
    // Let R be the order generated by the number field elements in G.
    // Let I be a prime proper R-ideal above p.
    // We are looking for a \in R such that aI/p\subset R.
    // (in fact we're returning a/p)
    K:=Universe(G);
    n:=Degree(K);
    Z:=Integers();
    Q:=Rationals();
    M:=Matrix(Q,[Eltseq(g):g in G]);

    assert Category(I) eq SeqEnum;

    C:=Matrix(GF(p),n,n^2,[]);
    // compute the inverse of the matrix defining R
    N:=M^-1;
    for i in [1..n] do
        for j in [1..n] do
            // compute a number field element
            v:=G[i] * I[j];
            // turn this back into the coordinates for Ip.
            w:=Vector(Eltseq(v)) * N;
            for k in [1..n] do
                C[i,1+(j-1)*n+(k-1)]:=w[k];
            end for;
        end for;
    end for;

    nker:=Basis(Nullspace(C));
    nker_lifts:=[Vector(Z,v) : v in nker];
    a_over_ps:=[(Vector(K,w),Vector(G))/p : w in nker_lifts];

    // Most often, there is exactly one element in a_over_ps. But it may also
    // happen that there are more, especially in ramified cases.
    // assert #a_over_ps eq 1;

    h:=a_over_ps[1];

    /* We should now have h*I \subset R, so all generators of h*I must belong to
     * R -- except that since we've done computations locally (we worked over
     * GF(p), which means that the solution we obtained is only valid over the
     * p-adic ring Zp), the only thing we guarantee is that _locally at p_, we
     * are in the same order. */
    // assert &and[h*x in Order(G): x in I];
    assert &and[Valuation(Denominator(Vector(Eltseq(h*x))*N),p) eq 0:x in I];
    return h;
end function;

function valuation_of_ideal_at_prime_ideal(G, J, I, p, e : helper)
    // Let R be the order generated by the number field elements in G.
    // Let I be a prime proper R-ideal above p, of ramification index e.
    // Let J be a R-ideal.
    //
    // We return the I-valuation of M.

    K:=Universe(G);
    n:=Degree(K);
    Z:=Integers();
    Q:=Rationals();
    M:=Matrix(Q,[Eltseq(g):g in G]);
    N:=M^-1;
    MJ:=Matrix(Q,[Eltseq(g):g in J]) * N;
    dJ:=Denominator(MJ);
    MJ*:=dJ;

    // Can be precomputed of course.
    if assigned helper and Category(helper) ne BoolElt then
        a:=helper;
    else
        a:=valuation_helper_for_ideal(G, I, p);
    end if;

    // take all generators of J. Multiply by a, and get the coordinates wrt
    // the basis of R
    v:=-1;
    repeat
        MJ:=Matrix([Vector(Eltseq(K!(a*(Vector(K,j),Vector(G)))))*N:j in Rows(MJ)]);
        v+:=1;
    until Denominator(MJ) ne 1;

    return v - Valuation(dJ,p)*e;
end function;

/* This computes the factorization of a prime p in the p-maximal order of the
 * number field K. The maximal order is computed as well, but (presently) not
 * returned.
 *
 * This returns a list of tuples <I,e>, where I are prime ideals in hnf form,
 * and e is the ramification index.
 *
 * The inertia degree is not returned, but it is trivially accessible (degree
 * of the prime factor being considered).
 */
function factorization_of_prime(K, p)
    /* Note that the algorithm in Cohen's book is barely usable.  For our
     * purposes, I believe it is sufficient to proceed more directly.  */

    /* We implement the methoded alluded to in the remark concluding section
     * 6.2 in Cohen's book (4th printing 2000, page 322), and rather avoid
     * ideal division which is a pain.
     */

    n:=Degree(K);
    /* Compute the locally maximal order */
    _,G:=p_maximal_order(K, p);
    O:=Order(G);
    /* Computes the p-radical, which is known to have valuation 1 at each
     * prime ideal above p */
    Ip:=p_radical_of_order(G,p);

    M:=Matrix([Eltseq(g):g in G]);
    N:=M^-1;

    /* We may write the matrix of the map x^p-x in the algebra O/pO */
    // F:=Matrix(GF(p),Matrix([Eltseq(x^p-x):x in G])*N);
    /* The number of ideals above p is then exactly the dimension of the
     * nullspace of this matrix. */
    // assert Dimension(Nullspace(F)) eq #Factorization(ideal<OK|p>);

    /* We pick an element of the Fp-algebra O/pO (or possibly a subpiece of
     * it, as we will see). What does it take to have the multiplication by
     * this element have a minimal polynomial of the largest possible degree ?
     * At least, all the decompositions in the subpieces of this Fp-algebra
     * must have maximal minimal polynomial. For subpieces which are fields,
     * this means a primitive element. For subpieces of the form O/I^2, this
     * means the same kind of eigenvalue, but with non-diagonal matrix when
     * written in the adapted basis (we have to have some nilpotent portion).
     *
     * We can't be sure that random picking will give a minimum polynomial of
     * largest degree. This is because among the different pieces, there could
     * be colliding eigenvalues in residue fields of the same degree. We want
     * to avoid that.
     *
     * We choose to work in an alternative way. We start with _one_ subalgebra
     * to pick elements from. Initially it's O. Each of the factors of the
     * minimal polynomial yields some subalgebra. If this factor is not
     * repeated in the characteristic polynomial more than it is in the
     * minimal polynomial, this part is simple and we are done. As long as
     * there seems to be more distinct pieces to tell apart, we have to
     * recurse.
     */

    pick_from:=[<G, [p*x:x in G], VectorSpace(GF(p),n)>];

    /* How do write an element of <G>, given as a vector over a basis of K,
     * directly as a combination of the elements of G ?
     *
     * We want something like a matrix G' such that G*G' = Identity.
     */
    Z:=Integers();
    ideals:=[];
    SetSeed(1);

    while not IsEmpty(pick_from) do
        T,gcd_with,amb:=Explode(pick_from[1]);
        pick_from:=pick_from[2..#pick_from];

        c:=&+[Random([0..p-1])*x:x in T];
        Ec := Eltseq(c);

        Mc:=Matrix(GF(p),Matrix([Eltseq(c*x):x in G])*N);
        Pc:=MinimalPolynomial(Mc);

        /* Factor the minimal polynomial */
        fac_Pc:=Factorization(Pc);

        /* Look for characteristic subspaces */
        characteristic_subspaces:=[Basis(amb meet Nullspace(Evaluate(f[1],Mc)^f[2])):f in fac_Pc];

        // Purge parasites from other pieces
        newfac := [];
        newcharpol := [];
        for i := 1 to #fac_Pc do
            if #characteristic_subspaces[i] eq 0 then
                continue;
            end if;
            Append(~newfac, fac_Pc[i]);
            Append(~newcharpol, characteristic_subspaces[i]);
        end for;
        fac_Pc := newfac;
        characteristic_subspaces := newcharpol;

        /* We may write a change of basis matrix which makes
         * C*Mc*C^-1 block diagonal */
        // C:=Matrix(&cat characteristic_subspaces);
        // print [*m(c) where q,m is quo<O|x[1]>:x in ideals*];
        //

        for i in [1..#fac_Pc] do
            e:=fac_Pc[i][2];
            /* Consider the elements of O which map to zero in O/I^e, and
             * non-zero elsewhere. These generate I ! */
            gens:=[K|];
            for j in [1..#fac_Pc] do
                p1:=i eq j select p else 1;
                for v in characteristic_subspaces[j] do
                    Append(~gens, p1*K!O!ChangeUniverse(Eltseq(v),Z));
                end for;
            end for;
            /* At this point we're not completely finished. We need to split the
             * ramified ideals, and get their prime part.
             *
             * Fortunately, this is made very easy by just gcd'ing (adding) the
             * p-radical ! */
            Ix:=nf_elements_hnf(gens cat Ip cat gcd_with);
            if #characteristic_subspaces[i] eq e*Degree(fac_Pc[i][1]) then
                Append(~ideals, <Ix,e>);
            else
                Append(~pick_from,
                <[K!O!ChangeUniverse(Eltseq(v),Z):v in characteristic_subspaces[i]],Ix, sub<amb|characteristic_subspaces[i]>>);
            end if;
        end for;
    end while;

    return ideals;
end function;



//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

function NormalizeProjectiveElement(uv, pk)
    R := Integers(pk);
    u := R!uv[1];
    v := R!uv[2];
    if IsInvertible(v) then
        u := u/v;
        return Integers()!u;
    else
        assert IsInvertible(u);
        v := v/u;
        return pk + Integers()!v;
    end if;
end function;

SBAD := "";
SBADINFO := "";

SBAD := Sprintf("%o# badideals for pol[0]=%o and pol[1]=%o\n", SBAD,
   polys[1], polys[2]);

for side := 0 to #polys-1 do

f := polys[side+1];
if Degree(f) eq 1 then continue; end if;
SBADINFO := Sprintf("%o# bad ideals for poly[%o]=%o\n", SBADINFO, side, f);
K<alpha>:=NumberField(f);

d:=Discriminant(f)*LeadingCoefficient(f);
fff := Factorization(d : ECMLimit:=100, MPQSLimit:=0);
BadPrimes := [ x[1] : x in fff | x[2] gt 1 and x[1] le 10^6 ];

    /* This is only the debug part. Won't go in C */
/*
    OK:=Order([LeadingCoefficient(f)*alpha]);
    for p in BadPrimes do OK := pMaximalOrder(OK, p); end for;
    OK`Maximal := true;
    K`MaximalOrder := OK;
    J:=ideal<OK|ideal<OK|1,alpha>^-1>;
*/

FacBadPrimes := [];

for p in BadPrimes do
    _,G:=p_maximal_order(K, p);
    fac_p:=factorization_of_prime(K, p);
    Append(~FacBadPrimes, <p,G,fac_p>);
end for;

for pf in FacBadPrimes do
    p,G,fac:=Explode(pf);
    /* this is the same as J^-1, but with respect to our locally maximal order
     */
    jj:=nf_elements_hnf([foo*bar:foo in G, bar in [1,alpha]]);
    // printf "Prime ideals above %o:\n%o\n", p, fac;
    P1 := ProjectiveSpace(GF(p),1);
    rootsp:=Points(Scheme(P1,Homogenization(Evaluate(f,P1.1),P1.2,Degree(f))));
    found:={};
    for Q in rootsp do
        u,v:=Explode(ChangeUniverse(Eltseq(Q),ZZ));
        // we want to see which are the ideals in the factorization of p which
        // are above this root. We thus try to decompose <p,(v*alpha-u)>*J.
        ii:=nf_elements_hnf([foo*bar: foo in G, bar in [p, p*alpha, v*alpha-u]]);
        pp:=nf_elements_hnf([foo*p: foo in G]);
        val:=func<I,pi|valuation_of_ideal_at_prime_ideal(G,I,pi[1],p,pi[2])>;
        vals:=[ val(ii, pi) - val(jj, pi) : pi in fac ];
        capvals:=[ Minimum(val(ii, pi) - val(jj, pi), val(pp,pi)) : pi in fac ];
        X:=ZPH.1;
        Y:=ZPH.2;
        /* same as usual, we need to write a parametrized form for the p
         * points above (u:v) */
        if v eq 0 then
            assert u eq 1;
            ff:=Evaluate(Homogenization(Evaluate(f,X),Y,Degree(f)),[u,p*x]);
        else
            assert v eq 1;
            ff:=Evaluate(Homogenization(Evaluate(f,X),Y,Degree(f)),[u+p*x,v]);
        end if;
        w:=Valuation(Content(ff),p);
        if #[x : x in vals | x ne 0] gt 1 then
            if Q[2] ne 0 then
                QQ := Integers()!Q[1];
            else
                QQ := p;
            end if;
            SBAD := Sprintf("%o%o,%o:%o: %o\n", SBAD, IntegerToString(p, 16),
            IntegerToString(QQ, 16), side, #[x : x in vals | x ne 0]);
        end if;
        text:=Sprintf("### %o %o %o %o", p, Q, w, vals);
        // print [ val(ii, pi) : pi in fac ];
        matches:=[i:i in [1..#fac] | vals[i] gt 0];
        all_special:=[];
        for i in matches do
            special:=[];
            e_ramif:=fac[i][2];
            f_inert:=prime_ideal_inertia_degree(G, fac[i][1]);
            if e_ramif gt 1 then
                Append(~special, Sprintf("ramified, e=%o", e_ramif));
            end if;
            if f_inert gt 1 then
                Append(~special, Sprintf("f=%o", f_inert));
            end if;
            special:=Join(special, ", ");
            if #special gt 0 then
                special:=Sprintf("i=%o: ", i) cat special;
                Append(~all_special, special);
            end if;
        end for;
        if #all_special gt 0 then
            text cat:= " (" cat Join(all_special, "; ") cat ")";
        end if;
        if #matches eq 1 then 
            // I:=ideal<OK|ideal<OK|p,v*alpha-u>*J> + ideal<OK|p>;
            // assert IsPrime(I);
            i:=matches[1];
            e_ramif:=fac[i][2];
            f_inert:=prime_ideal_inertia_degree(G, fac[i][1]);
            assert vals[i]*f_inert eq w;
            Include(~found, matches[1]);
            SBADINFO := Sprintf("%o%o ; easy.\n", SBADINFO, text);
            continue;
        end if;
        SBADINFO := Sprintf("%o%o\n", SBADINFO, text);
        /* Now see how this root lifts */
        /* we'll be tredding over some variables which are used above, sorry
         */
        status:=[<Q,vals,matches>];
        report:=[];
        k:=1;
        while #status ge 1 do
            k+:=1;
            P1k:=ProjectiveSpace(Integers(p^k),1);
            next_status:=[];
            for Qvm in status do
                cQ,base,base_alive:=Explode(Qvm);
                next_status_above_this:=[];
                alive_above_this:={};
                if Gcd(Integers()!cQ[2], p) eq p then
                    lQs:=[P1k![ZZ!cQ[1],ZZ!cQ[2]+p^(k-1)*x] : x in [0..p-1]];
                else
                    lQs:=[P1k![ZZ!cQ[1]+p^(k-1)*x,1] : x in [0..p-1]];
                end if;
                above:=[**];
                for nQ in lQs do
                    u,v:=Explode(ChangeUniverse(Eltseq(nQ),ZZ));
                    ii:=nf_elements_hnf([foo*bar: foo in G, bar in [p^k, p^k*alpha, v*alpha-u]]);
                    nvals:=[ val(ii, pi) - val(jj, pi) : pi in fac ];
                    alive:=[i:i in [1..#fac] | nvals[i] ne base[i]];
                    // printf "%o mod %o^%o -> still alive %o (%o)\n", nQ, p, k, alive, nvals;
                    if #alive gt 0 then
                        Append(~next_status_above_this, <nQ, nvals, alive>);
                    end if;
                    alive_above_this join:= Seqset(alive);
                    Append(~above, <<u,v>,0,nvals,alive>);
                end for;
                if #alive_above_this le 1 then
                    // printf "%o mod %o^%o is accurate enough\n", cQ, p, k-1;
                    totval:=0;
                    for i in matches do
                        if i in alive_above_this then continue; end if;
                        totval+:=base[i]*prime_ideal_inertia_degree(G, fac[i][1]);
                    end for;
                    ccQ := NormalizeProjectiveElement(cQ, p^(k-1));
                    str := Sprintf("%o %o %o %o", p, k-1, ccQ, side);
                    for i in matches do
                        if i in alive_above_this then
                            assert #[a:a in above|i in a[4]] in {0,1,p};
                            // print [a:a in above|i in a[4]];
                            // print [a[3][i]:a in above | i in a[4]];
                            SBADINFO := Sprintf("%o# %o mod %o^%o ; v_%o_%o=e-%o\n",
                                SBADINFO,
                                cQ, p, k-1,
                                p, i, totval);
                            str := Sprintf("%o -%o", str, totval);
                        else
                            myval := base[i]*prime_ideal_inertia_degree(G, fac[i][1]);
                            SBADINFO := Sprintf("%o# %o mod %o^%o ; v_%o_%o=%o\n",
                                SBADINFO,
                                cQ, p, k-1,
                                p, i, myval);
                            str := Sprintf("%o %o", str, myval);
                        end if;
                    end for;
                    Append(~report, str);
                    SBADINFO := Sprintf("%o##\n", SBADINFO);
                else
                    /* we are going to recurse on a subset of lQs, which might
                     * be strict. If this is the case, then we must provide
                     * the valuation info for the branches into which we are
                     * *not* going to recurse */
                    for a in above do
                        uv,ii,nvals,alive:=Explode(a);
                        if #alive gt 0 then continue; end if;
                        ccQ := NormalizeProjectiveElement(uv, p^k);
                        str := Sprintf("%o %o %o %o", p, k, ccQ, side);
                        for i in matches do
                            SBADINFO := Sprintf("%o# (%o : %o) mod %o^%o ; v_%o_%o=%o\n",
                                SBADINFO,
                                uv[1], uv[2], p, k,
                                p, i, base[i]);
                            str := Sprintf("%o %o", str, base[i]);
                        end for;
                        Append(~report, str);
                        SBADINFO := Sprintf("%o##\n", SBADINFO);
                    end for;
                    next_status cat:= next_status_above_this;
                end if;
            end for;
            status:=next_status;
        end while;
        for l in report do
            SBADINFO := Sprintf("%o%o\n",SBADINFO,l);
        end for;
    end for;
end for; // loop on the potential bad p's 

end for; // loop on the two polynomials

if assigned DEBUG then
    printf SBAD;
    printf SBADINFO;
else
    fprintf badfile, SBAD;
    fprintf badinfofile, SBADINFO;

    ell := StringToInteger(ell);

    if ell eq 0 then
        p := StringToInteger(mainp);
        fff := Factorization(p-1);
        ell := fff[#fff][1];
    end if;

    nmaps := [];
    for side := 1 to #polys do 
        f := polys[side];

        nr := #Roots(f, RealField());
        nc := Degree(f)-nr;
        assert IsEven(nc);
        Append(~nmaps, nr + (nc div 2) -1);
    end for;

    SetColumns(0);
    printf "ell %o\n", ell;
    for side:=1 to #polys do
        printf "nmaps%o %o\n", side-1, nmaps[side];
    end for;
    exit;
end if;

